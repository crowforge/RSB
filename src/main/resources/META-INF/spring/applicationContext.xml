<?xml version="1.0" encoding="UTF-8"?>
<!--
    R Service Bus
    
    Copyright (c) Copyright of OpenAnalytics BVBA, 2010-2011
 
    ===========================================================================
 
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
 
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.
 
    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>
        
    @author rsb.development@openanalytics.eu
-->
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:jms="http://www.springframework.org/schema/jms"
    xmlns:si="http://www.springframework.org/schema/integration"
    xmlns:http="http://www.springframework.org/schema/integration/http"
    xmlns:file="http://www.springframework.org/schema/integration/file"
    xmlns:mail="http://www.springframework.org/schema/integration/mail"
    xmlns:jaxws="http://cxf.apache.org/jaxws"
    xmlns:jaxrs="http://cxf.apache.org/jaxrs"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
        http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms.xsd
        http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd
        http://www.springframework.org/schema/integration/http http://www.springframework.org/schema/integration/http/spring-integration-http.xsd
        http://www.springframework.org/schema/integration/file http://www.springframework.org/schema/integration/file/spring-integration-file.xsd
        http://www.springframework.org/schema/integration/mail http://www.springframework.org/schema/integration/mail/spring-integration-mail.xsd
        http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
        http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd">
    
    <!-- Configuration loading and validation -->
    <bean id="configuration" class="eu.openanalytics.rsb.config.ConfigurationFactory"
                             factory-method="loadJsonConfiguration">
      <constructor-arg value="#{T(eu.openanalytics.rsb.config.Configuration).DEFAULT_JSON_CONFIGURATION_FILE}" />
    </bean>

    <!-- Statistics handler -->
    <bean id="jobStatisticsHandler"
          class="eu.openanalytics.rsb.stats.JobStatisticsHandlerFactory"
          factory-method="create"
          init-method="initialize"
          destroy-method="destroy">
        <constructor-arg index="0" value="#{configuration.jobStatisticsHandlerConfiguration.className}" />
        <constructor-arg index="1" value="#{configuration.jobStatisticsHandlerConfiguration.parameters}" />
    </bean>

    <!-- Spring components -->
    <context:annotation-config />
    <context:component-scan base-package="eu.openanalytics.rsb.component" />
    <bean id="messageSource"
          class="org.springframework.context.support.ResourceBundleMessageSource"
          p:basename="messages" />
    
    <!-- RServi -->
    <bean name="rServiInstanceProvider"
          class="eu.openanalytics.rsb.rservi.RmiRServiInstanceProvider" />
    
    <!-- CXF -->
    <import resource="classpath:META-INF/cxf/cxf.xml" />
    <import resource="classpath:META-INF/cxf/cxf-servlet.xml" />

    <jaxws:endpoint implementor="#soapMtomJobHandler"
                    address="/soap/mtom-jobs">
      <jaxws:properties>
        <entry key="mtom-enabled" value="true"/>
      </jaxws:properties>
    </jaxws:endpoint>

    <util:list id="jsonRsbTypes">
        <value>#{T(eu.openanalytics.rsb.Constants).RSB_JSON_CONTENT_TYPE}</value>
    </util:list>

    <bean id="jsonProvider" class="org.apache.cxf.jaxrs.provider.JSONProvider"
        p:consumeMediaTypes-ref="jsonRsbTypes" p:produceMediaTypes-ref="jsonRsbTypes"
        p:ignoreNamespaces="true" p:attributesToElements="true" />

    <bean id="iaeMapper" class="eu.openanalytics.rsb.jaxrs.IllegalArgumentExceptionMapper" />

    <jaxrs:server address="/rest">
        <jaxrs:serviceBeans>
            <ref bean="jobsResource" />
            <ref bean="resultsResource" />
            <ref bean="resultResource" />
        </jaxrs:serviceBeans>
        <jaxrs:providers>
            <ref bean="jsonProvider" />
            <ref bean="iaeMapper" />
        </jaxrs:providers>
    </jaxrs:server>
  
    <!-- ActiveMQ -->
    <bean name="amqDeadLetterStrategy"
        class="org.apache.activemq.broker.region.policy.IndividualDeadLetterStrategy"
        p:queuePrefix="DLQ." />

    <bean name="amqDefaultPolicyEntry" class="org.apache.activemq.broker.region.policy.PolicyEntry"
        p:queue="r.*" p:deadLetterStrategy-ref="amqDeadLetterStrategy" />

    <bean name="amqPolicyMap" class="org.apache.activemq.broker.region.policy.PolicyMap"
        p:defaultEntry-ref="amqDefaultPolicyEntry" />

    <bean name="amqBroker" class="org.apache.activemq.broker.BrokerService"
        p:brokerName="rsb-amq-broker" p:persistent="true"
        p:dataDirectoryFile="#{configuration.activeMqWorkDirectory}" p:useJmx="true"
        p:useShutdownHook="false" p:destinationPolicy-ref="amqPolicyMap"
        init-method="start" destroy-method="stop" />

    <bean name="amqRedeliveryPolicy" class="org.apache.activemq.RedeliveryPolicy"
        p:useExponentialBackOff="true" p:maximumRedeliveries="6" />

    <bean name="amqPrefetchPolicy" class="org.apache.activemq.ActiveMQPrefetchPolicy"
        p:all="1" />

    <bean name="amqConnectionFactory" class="org.apache.activemq.spring.ActiveMQConnectionFactory"
        p:brokerURL="vm://rsb-amq-broker" p:redeliveryPolicy-ref="amqRedeliveryPolicy"
        p:prefetchPolicy-ref="amqPrefetchPolicy" depends-on="amqBroker" />
        
    <!-- Spring JMS -->
    <bean name="jmsTemplate" class="org.springframework.jms.core.JmsTemplate"
        p:connectionFactory-ref="amqConnectionFactory" p:explicitQosEnabled="true"
        p:deliveryPersistent="true" p:sessionTransacted="true"
        p:receiveTimeout="#{configuration.jobTimeOut}" />

    <jms:listener-container connection-factory="amqConnectionFactory"
        acknowledge="transacted" concurrency="#{configuration.numberOfConcurrentJobWorkersPerQueue}"
        prefetch="1">
        <jms:listener destination="r.jobs.>" ref="jobProcessor"
            method="process" />
    </jms:listener-container>

    <jms:listener-container connection-factory="amqConnectionFactory"
        acknowledge="transacted">
        <jms:listener destination="r.results.>" ref="restResultProcessor"
            method="process"
            selector="#{T(eu.openanalytics.rsb.Constants).SOURCE_JMS_HEADER} = '#{T(eu.openanalytics.rsb.message.AbstractWorkItem$Source).REST}'" />
    </jms:listener-container>

    <jms:listener-container connection-factory="amqConnectionFactory"
        acknowledge="transacted">
        <jms:listener destination="r.results.>" ref="directoryDepositHandler"
            method="handleZipResult"
            selector="#{T(eu.openanalytics.rsb.Constants).SOURCE_JMS_HEADER} = '#{T(eu.openanalytics.rsb.message.AbstractWorkItem$Source).DIRECTORY}'" />
    </jms:listener-container>

    <jms:listener-container connection-factory="amqConnectionFactory"
        acknowledge="transacted">
        <jms:listener destination="DLQ.r.jobs.*" ref="dlqHandler"
            method="handle" />
    </jms:listener-container>
    
    <!-- Spring Integration -->
    <si:channel id="adminEmailChannel" />
    <mail:outbound-channel-adapter
        channel="adminEmailChannel"
        host="#{configuration.smtpConfiguration.host}" port="#{configuration.smtpConfiguration.port}"
        username="#{configuration.smtpConfiguration.username}" password="#{configuration.smtpConfiguration.password}"/>
        
    <bean id="zipJobFilter" class="org.springframework.integration.file.filters.CompositeFileListFilter">
      <constructor-arg>
        <list>
          <bean class="eu.openanalytics.rsb.si.MinimumAgeFileListFilter" p:minimumAge="5000" />
          <bean class="org.springframework.integration.file.filters.RegexPatternFileListFilter">
            <constructor-arg value="^.*\.zip$"/>
          </bean>
        </list>
      </constructor-arg>
    </bean>
    <si:channel id="jobDirectoryDepositChannel" />
    <si:service-activator input-channel="jobDirectoryDepositChannel"
                          ref="directoryDepositHandler"
                          method="handleZipJob" />
        
    <si:channel id="restResultFilesChannel" />
    <file:outbound-channel-adapter
        channel="restResultFilesChannel"
        directory="#{configuration.resultsDirectory}"
        auto-create-directory="true" />
</beans>
